// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator zod {
//   provider = "prisma-nestjs-graphql"
//   output   = "../src/types/prisma"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id          String  @id @default(uuid())
  phoneNumber String  @unique
  name        String
  order       Order[]
  role        Role    @default(USER)

  @@map("users")
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]

  @@map("categories")
}

model Product {
  id         String      @id @default(uuid())
  name       String      @unique
  disabled   Boolean     @default(false)
  categories Category[]
  menuLines  MenuLine[]
  orderLines OrderLine[]

  @@map("products")
}

model MenuLine {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  price     Int
  menu      Menu[]

  @@map("menuLines")
}

model Menu {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  number    Int        @unique @default(autoincrement())
  name      String     @unique
  lines     MenuLine[]

  @@map("menus")
}

model OrderLine {
  id          String  @id @default(uuid())
  orderId     String
  order       Order?  @relation(fields: [orderId], references: [id])
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  price       Int
  quantity    Int
  totalAmount Int

  @@map("orderLines")
}

model Order {
  id                   String      @id @default(uuid())
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  date                 DateTime
  number               Int         @unique @default(autoincrement())
  status               String      @default("NEW")
  userId               String
  user                 User        @relation(fields: [userId], references: [id])
  lines                OrderLine[]
  totalAmount          Int
  totalProductQuantity Int

  @@map("orders")
}
