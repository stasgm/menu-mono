// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  name         String    @unique
  passwordHash String
  role         String
  active       Boolean   @default(false)
  confirmed    Boolean   @default(false)
  customer     Customer  @relation(fields: [customerId], references: [id])
  customerId   String    @unique @db.Uuid

  @@map("users")
}

model Customer {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  firstName   String
  lastName    String
  phoneNumber String    @unique
  email       String    @unique
  order       Order[]
  user        User?

  @@map("customers")
}

model Category {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  products  Product[]

  @@map("categories")
}

model Product {
  id         String      @id @default(uuid()) @db.Uuid
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  name       String      @unique
  disabled   Boolean     @default(false)
  categories Category[]
  menuLines  MenuLine[]
  orderLines OrderLine[]

  @@map("products")
}

model MenuLine {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  productId String    @db.Uuid
  product   Product   @relation(fields: [productId], references: [id])
  price     Int
  menu      Menu[]

  @@map("menuLines")
}

model Menu {
  id        String     @id @default(uuid()) @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  number    Int        @unique @default(autoincrement())
  name      String     @unique
  lines     MenuLine[]

  @@map("menus")
}

model OrderLine {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  orderId     String    @db.Uuid
  order       Order?    @relation(fields: [orderId], references: [id])
  productId   String    @db.Uuid
  product     Product   @relation(fields: [productId], references: [id])
  price       Int
  quantity    Int
  totalAmount Int

  @@map("orderLines")
}

model Order {
  id                   String      @id @default(uuid()) @db.Uuid
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  deletedAt            DateTime?
  date                 DateTime
  number               Int         @unique @default(autoincrement())
  status               String      @default("NEW")
  customerId           String      @db.Uuid
  customer             Customer    @relation(fields: [customerId], references: [id])
  lines                OrderLine[]
  totalAmount          Int
  totalProductQuantity Int

  @@map("orders")
}
